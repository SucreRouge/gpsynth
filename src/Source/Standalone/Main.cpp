/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "GPStandaloneDialog.h"


//==============================================================================
class GeneticProgrammingSynthesizerApplication  : public JUCEApplication
{
public:
    //==============================================================================
    GeneticProgrammingSynthesizerApplication() {}

    const String getApplicationName()       {
        return ProjectInfo::projectName;
    }
    const String getApplicationVersion()    {
        return ProjectInfo::versionString;
    }
    bool moreThanOneInstanceAllowed()       {
        return true;
    }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        // This method is where you should put your application's initialisation code..
        filterWindow = new StandaloneFilterWindow (String("Cabbage"), Colours::black);
        filterWindow->setTitleBarButtonsRequired (DocumentWindow::allButtons, false);
        filterWindow->setVisible (true);
        //turn off resizeable...
        //filterWindow->setResizable (true, true);
        juce::Thread::setCurrentThreadName("cabbage");
    }

    void shutdown()
    {
        filterWindow = 0;// = nullptr;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

private:
    ScopedPointer<StandaloneFilterWindow> filterWindow;
};


/*
			filterWindow = new StandaloneFilterWindow (String("Cabbage"), Colours::black);
            filterWindow->setTitleBarButtonsRequired (DocumentWindow::allButtons, false);
            filterWindow->setVisible (true);
            //turn off resizeable...
			//filterWindow->setResizable (true, true);
            juce::Thread::setCurrentThreadName("cabbage");
          }

          void shutdown()
          {
			filterWindow = 0;// = nullptr;
			appProperties->closeFiles();
			deleteAndZero(appProperties);
			deleteAndZero(defaultPropSet);
          }

          const String getApplicationName()
          {
             return String("cabbage");
          }

          const String getApplicationVersion()
          {
             return String("0.0");
          }

		  bool moreThanOneInstanceAllowed()
		  {
			  return true;
		  }

       private:
         ScopedPointer<StandaloneFilterWindow> filterWindow;
*/
//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (GeneticProgrammingSynthesizerApplication)
